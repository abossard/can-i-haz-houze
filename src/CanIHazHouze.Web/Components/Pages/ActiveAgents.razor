@page "/agents/active"
@using AgentModel = CanIHazHouze.Web.Agent
@using AgentRunModel = CanIHazHouze.Web.AgentRun
@inject AgentApiClient AgentApi
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Active Agents - CanIHazHouze</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>‚ö° Active Agent Runs</h1>
        <button class="btn btn-outline-secondary" @onclick="RefreshActiveRuns">
            üîÑ Refresh
        </button>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading active runs...</p>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @error
        </div>
    }
    else if (activeRuns.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No active runs</h4>
            <p>There are currently no agents running in the background.</p>
        </div>
    }
    else
    {
        <div class="alert alert-success mb-4">
            <strong>@activeRuns.Count</strong> agent(s) currently running
        </div>

        <div class="list-group">
            @foreach (var runId in activeRuns)
            {
                var runDetails = runDetailsCache.GetValueOrDefault(runId);
                <div class="list-group-item">
                    <div class="d-flex w-100 justify-content-between align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="mb-1">
                                Run ID: <code>@runId.Substring(0, Math.Min(8, runId.Length))</code>
                            </h5>
                            @if (runDetails != null)
                            {
                                <p class="mb-1">
                                    <strong>Agent:</strong> @runDetails.AgentId.Substring(0, Math.Min(8, runDetails.AgentId.Length))
                                    <span class="ms-3"><strong>Status:</strong> <span class="badge bg-@GetStatusColor(runDetails.Status)">@runDetails.Status.ToUpper()</span></span>
                                    <span class="ms-3"><strong>Turns:</strong> @runDetails.TurnCount / @runDetails.MaxTurns</span>
                                </p>
                                @if (!string.IsNullOrEmpty(runDetails.Goal))
                                {
                                    <p class="mb-1 text-muted"><strong>Goal:</strong> @runDetails.Goal</p>
                                }
                                <small class="text-muted">Started: @runDetails.StartedAt.ToString("HH:mm:ss") | Last updated: @runDetails.LastUpdated.ToString("HH:mm:ss")</small>
                            }
                            else
                            {
                                <small class="text-muted">Loading details...</small>
                            }
                        </div>
                        <div class="btn-group-vertical ms-3" role="group">
                            @if (runDetails?.Status == "running")
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => PauseRun(runDetails.AgentId, runId)">
                                    ‚è∏Ô∏è Pause
                                </button>
                            }
                            @if (runDetails?.Status == "paused")
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => ResumeRun(runDetails.AgentId, runId)">
                                    ‚ñ∂Ô∏è Resume
                                </button>
                            }
                            <button class="btn btn-sm btn-danger" @onclick="() => CancelRun(runDetails?.AgentId ?? string.Empty, runId)">
                                ‚èπÔ∏è Cancel
                            </button>
                            <button class="btn btn-sm btn-info" @onclick="() => ViewDetails(runDetails?.AgentId ?? string.Empty, runId)">
                                üëÅÔ∏è View
                            </button>
                        </div>
                    </div>

                    @if (runDetails != null && runDetails.ConversationHistory?.Count > 0)
                    {
                        <div class="mt-3">
                            <strong>Latest Conversation Turn:</strong>
                            <div class="small" style="max-height: 200px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
                                @{
                                    var latestTurn = runDetails.ConversationHistory.LastOrDefault();
                                    if (latestTurn != null)
                                    {
                                        <div class="mb-2">
                                            <span class="badge bg-@GetRoleBadgeColor(latestTurn.Role)">@latestTurn.Role.ToUpper()</span>
                                            <span class="text-muted ms-2">@latestTurn.Timestamp.ToString("HH:mm:ss")</span>
                                        </div>
                                        <pre style="white-space: pre-wrap; word-wrap: break-word; margin: 0; font-size: 0.85em;">@(latestTurn.Content.Length > 200 ? latestTurn.Content.Substring(0, 200) + "..." : latestTurn.Content)</pre>
                                    }
                                }
                            </div>
                        </div>
                    }

                    @if (runDetails != null && runDetails.Logs.Count > 0)
                    {
                        <div class="mt-3">
                            <strong>Recent Logs:</strong>
                            <div class="small" style="max-height: 150px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
                                @foreach (var log in runDetails.Logs.TakeLast(5))
                                {
                                    <div class="mb-1">
                                        <span class="badge bg-@GetLogLevelColor(log.Level)">@log.Level.ToUpper()</span>
                                        <span class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</span>
                                        <span>@log.Message</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<string> activeRuns = new();
    private Dictionary<string, AgentRunModel> runDetailsCache = new();
    private bool loading = true;
    private string? error;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshActiveRuns();
        
        // Auto-refresh every 2 seconds
        refreshTimer = new Timer(async _ => await InvokeAsync(async () => await RefreshActiveRuns()), null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task RefreshActiveRuns()
    {
        try
        {
            loading = true;
            error = null;
            
            var response = await AgentApi.GetActiveRunsAsync();
            if (response != null)
            {
                activeRuns = response.ActiveRuns;
                
                // Fetch details for each active run
                foreach (var runId in activeRuns)
                {
                    if (!runDetailsCache.ContainsKey(runId))
                    {
                        // Try to load details - we need to know the agentId
                        // For now, we'll try to get from existing cache or skip
                        _ = Task.Run(async () => await TryLoadRunDetails(runId));
                    }
                    else
                    {
                        // Refresh existing run details
                        _ = Task.Run(async () => await TryLoadRunDetails(runId));
                    }
                }
                
                // Remove runs that are no longer active
                var runIdsToRemove = runDetailsCache.Keys.Where(k => !activeRuns.Contains(k)).ToList();
                foreach (var runId in runIdsToRemove)
                {
                    runDetailsCache.Remove(runId);
                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task TryLoadRunDetails(string runId)
    {
        try
        {
            // If we have cached details, use the agentId from there
            if (runDetailsCache.TryGetValue(runId, out var cachedRun))
            {
                var updated = await AgentApi.GetRunAsync(cachedRun.AgentId, runId);
                if (updated != null)
                {
                    runDetailsCache[runId] = updated;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch
        {
            // Ignore errors when fetching individual run details
        }
    }

    private async Task PauseRun(string agentId, string runId)
    {
        try
        {
            await AgentApi.PauseRunAsync(agentId, runId);
            await RefreshActiveRuns();
        }
        catch (Exception ex)
        {
            error = $"Failed to pause run: {ex.Message}";
        }
    }

    private async Task ResumeRun(string agentId, string runId)
    {
        try
        {
            await AgentApi.ResumeRunAsync(agentId, runId);
            await RefreshActiveRuns();
        }
        catch (Exception ex)
        {
            error = $"Failed to resume run: {ex.Message}";
        }
    }

    private async Task CancelRun(string agentId, string runId)
    {
        try
        {
            await AgentApi.CancelRunAsync(agentId, runId);
            await RefreshActiveRuns();
        }
        catch (Exception ex)
        {
            error = $"Failed to cancel run: {ex.Message}";
        }
    }

    private void ViewDetails(string agentId, string runId)
    {
        NavigationManager.NavigateTo($"/agents/runs/{agentId}");
    }

    private string GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "running" => "primary",
            "paused" => "warning",
            "completed" => "success",
            "failed" => "danger",
            _ => "secondary"
        };
    }

    private string GetLogLevelColor(string level)
    {
        return level.ToLower() switch
        {
            "error" => "danger",
            "warning" => "warning",
            "info" => "info",
            _ => "secondary"
        };
    }

    private string GetRoleBadgeColor(string role)
    {
        return role.ToLower() switch
        {
            "system" => "secondary",
            "user" => "primary",
            "assistant" => "success",
            "tool" => "info",
            _ => "secondary"
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
