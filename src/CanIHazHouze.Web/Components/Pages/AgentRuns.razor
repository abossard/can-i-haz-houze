@page "/agents/runs/{AgentId}"
@using AgentModel = CanIHazHouze.Web.Agent
@using AgentRunModel = CanIHazHouze.Web.AgentRun
@using AgentRunLogModel = CanIHazHouze.Web.AgentRunLog
@inject AgentApiClient AgentApi
@inject NavigationManager NavigationManager

<PageTitle>Agent Runs - CanIHazHouze</PageTitle>

<div class="container mt-4">
    <div class="mb-4">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            ‚Üê Back to Agents
        </button>
    </div>

    <h1>üìä Execution History</h1>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @error
        </div>
    }
    else if (agent != null)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">@agent.Name</h5>
            </div>
            <div class="card-body">
                <p class="text-muted">@agent.Description</p>
            </div>
        </div>

        @if (runs.Count == 0)
        {
            <div class="alert alert-info">
                No execution history found for this agent.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Run ID</th>
                            <th>Status</th>
                            <th>Started</th>
                            <th>Duration</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var run in runs)
                        {
                            <tr>
                                <td><code>@run.Id.Substring(0, 8)</code></td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(run.Status)">
                                        @run.Status.ToUpper()
                                    </span>
                                </td>
                                <td>@run.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td>
                                    @if (run.CompletedAt.HasValue)
                                    {
                                        <span>@((run.CompletedAt.Value - run.StartedAt).TotalSeconds.ToString("F2"))s</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleRunDetails(run.Id)">
                                        @(expandedRunId == run.Id ? "Hide" : "View") Details
                                    </button>
                                </td>
                            </tr>
                            @if (expandedRunId == run.Id)
                            {
                                <tr>
                                    <td colspan="5">
                                        <div class="card">
                                            <div class="card-body">
                                                @if (!string.IsNullOrEmpty(run.Result))
                                                {
                                                    <div class="mb-3">
                                                        <h6>Result:</h6>
                                                        <div class="alert alert-success" style="white-space: pre-wrap;">@run.Result</div>
                                                    </div>
                                                }
                                                
                                                @if (!string.IsNullOrEmpty(run.Error))
                                                {
                                                    <div class="mb-3">
                                                        <h6>Error:</h6>
                                                        <div class="alert alert-danger">@run.Error</div>
                                                    </div>
                                                }

                                                @if (run.InputValues.Count > 0)
                                                {
                                                    <div class="mb-3">
                                                        <h6>Input Values:</h6>
                                                        <table class="table table-sm">
                                                            <tbody>
                                                                @foreach (var kvp in run.InputValues)
                                                                {
                                                                    <tr>
                                                                        <th style="width: 200px;">@kvp.Key</th>
                                                                        <td>@kvp.Value</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                }

                                                @if (run.Logs.Count > 0)
                                                {
                                                    <div class="mb-3">
                                                        <h6>Execution Logs:</h6>
                                                        <div class="list-group">
                                                            @foreach (var log in run.Logs)
                                                            {
                                                                <div class="list-group-item list-group-item-sm">
                                                                    <div class="d-flex w-100 justify-content-between">
                                                                        <span class="badge @GetLogLevelBadgeClass(log.Level)">@log.Level.ToUpper()</span>
                                                                        <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss.fff")</small>
                                                                    </div>
                                                                    <p class="mb-0 mt-1">@log.Message</p>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string? AgentId { get; set; }

    private AgentModel? agent;
    private List<AgentRunModel> runs = new();
    private bool loading = true;
    private string? error;
    private string? expandedRunId;
    private string owner = "demo-user";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            error = null;
            
            agent = await AgentApi.GetAgentAsync(owner, AgentId!);
            if (agent == null)
            {
                error = "Agent not found";
                return;
            }

            runs = await AgentApi.GetAgentRunsAsync(owner, AgentId!);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private void ToggleRunDetails(string runId)
    {
        expandedRunId = expandedRunId == runId ? null : runId;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "bg-success",
            "failed" => "bg-danger",
            "running" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetLogLevelBadgeClass(string level)
    {
        return level.ToLower() switch
        {
            "error" => "bg-danger",
            "warning" => "bg-warning",
            "info" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/agents");
    }
}
