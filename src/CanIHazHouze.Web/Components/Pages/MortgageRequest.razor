@page "/mortgage"
@using CanIHazHouze.Web
@using Microsoft.AspNetCore.Components.Forms
@inject MortgageApiClient MortgageApi
@inject DocumentApiClient DocumentApi
@inject ILogger<MortgageRequest> Logger
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Mortgage Request</PageTitle>

<style>
    .collapsible-header {
        transition: background-color 0.2s ease;
    }
    .collapsible-header:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

<h1>Mortgage Request Application</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (existingRequest == null)
{
    <div class="card">
        <div class="card-header">
            <h3>Create New Mortgage Request</h3>
        </div>
        <div class="card-body">
            <EditForm Model="newRequestModel" OnValidSubmit="CreateRequest">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="userName" class="form-label">Your Username</label>
                    <InputText id="userName" class="form-control" @bind-Value="newRequestModel.UserName" />
                </div>

                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                    @(isProcessing ? "Creating..." : "Create Mortgage Request")
                </button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Mortgage Request Details</h3>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ClearSelection" disabled="@isProcessing">
                Clear Selection
            </button>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Request ID:</strong> @existingRequest.Id</p>
                    <p><strong>Username:</strong> @existingRequest.UserName</p>
                    <p><strong>Status:</strong> 
                        <span class="badge @GetStatusBadgeClass(existingRequest.Status)">@existingRequest.Status</span>
                    </p>
                    <p><strong>Status Reason:</strong> @existingRequest.StatusReason</p>
                    @if (!string.IsNullOrEmpty(existingRequest.MissingRequirements))
                    {
                        <p><strong>Missing Requirements:</strong> @existingRequest.MissingRequirements</p>
                    }
                    <p><strong>Created:</strong> @existingRequest.CreatedAt.ToString("yyyy-MM-dd HH:mm")</p>
                    <p><strong>Last Updated:</strong> @existingRequest.UpdatedAt.ToString("yyyy-MM-dd HH:mm")</p>
                </div>
                <div class="col-md-6">
                    <h5>Request Data</h5>
                    @if (HasAnyData())
                    {
                        <ul class="list-group">
                            @if (existingRequest.RequestData.Income.AnnualIncome.HasValue)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Annual Income:</strong> @existingRequest.RequestData.Income.AnnualIncome.Value.ToString("C")</span>
                                </li>
                            }
                            @if (!string.IsNullOrEmpty(existingRequest.RequestData.Income.EmploymentType))
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Employment Type:</strong> @existingRequest.RequestData.Income.EmploymentType</span>
                                </li>
                            }
                            @if (existingRequest.RequestData.Credit.Score.HasValue)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Credit Score:</strong> @existingRequest.RequestData.Credit.Score.Value</span>
                                </li>
                            }
                            @if (!string.IsNullOrEmpty(existingRequest.RequestData.Employment.EmployerName))
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Employer:</strong> @existingRequest.RequestData.Employment.EmployerName</span>
                                </li>
                            }
                            @if (existingRequest.RequestData.Property.PropertyValue.HasValue)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Property Value:</strong> @existingRequest.RequestData.Property.PropertyValue.Value.ToString("C")</span>
                                </li>
                            }
                            @if (existingRequest.RequestData.Property.LoanAmount.HasValue)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong>Loan Amount:</strong> @existingRequest.RequestData.Property.LoanAmount.Value.ToString("C")</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No additional data provided yet.</p>
                    }
                </div>
            </div>
            
            <hr />
            
            <h5>Add Mortgage Requirements</h5>
            <p class="text-muted">Complete the forms below to provide the required mortgage application data. Each section contains structured fields for specific requirement types.</p>
            
            <!-- Income Verification -->
            <div class="card mb-3">
                <div class="card-header collapsible-header" @onclick="() => ToggleFormCollapse(nameof(incomeForm))" style="cursor: pointer;">
                    <h6 class="mb-0 d-flex justify-content-between align-items-center">
                        <span>📊 Income Verification</span>
                        <div>
                            @if (HasIncomeData())
                            {
                                <span class="badge bg-success me-2">✓ Submitted</span>
                            }
                            <i class="@(GetCollapseIcon(nameof(incomeForm)))"></i>
                        </div>
                    </h6>
                </div>
                <div class="card-body collapse @(GetCollapseClass(nameof(incomeForm)))" id="@($"collapse-{nameof(incomeForm)}")">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Annual Income ($)</label>
                            <input type="number" class="form-control" @bind="incomeForm.AnnualIncome" placeholder="75000" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Employment Type</label>
                            <select class="form-control" @bind="incomeForm.EmploymentType">
                                <option value="">Select...</option>
                                <option value="full-time">Full-time</option>
                                <option value="part-time">Part-time</option>
                                <option value="contract">Contract</option>
                                <option value="self-employed">Self-employed</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Years Employed</label>
                            <input type="number" class="form-control" @bind="incomeForm.YearsEmployed" placeholder="3" min="0" step="0.5" />
                        </div>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-primary btn-sm" @onclick="SubmitIncomeVerification" disabled="@isProcessing">
                            @(HasIncomeData() ? "Update Income Verification" : "Submit Income Verification")
                        </button>
                    </div>
                </div>
            </div>

            <!-- Credit Report -->
            <div class="card mb-3">
                <div class="card-header collapsible-header" @onclick="() => ToggleFormCollapse(nameof(creditForm))" style="cursor: pointer;">
                    <h6 class="mb-0 d-flex justify-content-between align-items-center">
                        <span>💳 Credit Report</span>
                        <div>
                            @if (HasCreditData())
                            {
                                <span class="badge bg-success me-2">✓ Submitted</span>
                            }
                            <i class="@(GetCollapseIcon(nameof(creditForm)))"></i>
                        </div>
                    </h6>
                </div>
                <div class="card-body collapse @(GetCollapseClass(nameof(creditForm)))" id="@($"collapse-{nameof(creditForm)}")">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Credit Score</label>
                            <input type="number" class="form-control" @bind="creditForm.CreditScore" placeholder="720" min="300" max="850" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Report Date</label>
                            <input type="date" class="form-control" @bind="creditForm.ReportDate" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Outstanding Debts ($)</label>
                            <input type="number" class="form-control" @bind="creditForm.OutstandingDebts" placeholder="15000" min="0" />
                        </div>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-primary btn-sm" @onclick="SubmitCreditReport" disabled="@isProcessing">
                            @(HasCreditData() ? "Update Credit Report" : "Submit Credit Report")
                        </button>
                    </div>
                </div>
            </div>

            <!-- Employment Verification -->
            <div class="card mb-3">
                <div class="card-header collapsible-header" @onclick="() => ToggleFormCollapse(nameof(employmentForm))" style="cursor: pointer;">
                    <h6 class="mb-0 d-flex justify-content-between align-items-center">
                        <span>🏢 Employment Verification</span>
                        <div>
                            @if (HasEmploymentData())
                            {
                                <span class="badge bg-success me-2">✓ Submitted</span>
                            }
                            <i class="@(GetCollapseIcon(nameof(employmentForm)))"></i>
                        </div>
                    </h6>
                </div>
                <div class="card-body collapse @(GetCollapseClass(nameof(employmentForm)))" id="@($"collapse-{nameof(employmentForm)}")">
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Employer Name</label>
                            <input type="text" class="form-control" @bind="employmentForm.EmployerName" placeholder="ABC Corporation" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Job Title</label>
                            <input type="text" class="form-control" @bind="employmentForm.JobTitle" placeholder="Software Developer" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <label class="form-label">Monthly Salary ($)</label>
                            <input type="number" class="form-control" @bind="employmentForm.MonthlySalary" placeholder="6250" min="0" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">
                                <input type="checkbox" @bind="employmentForm.IsVerified" /> Employment Verified
                            </label>
                        </div>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-primary btn-sm" @onclick="SubmitEmploymentVerification" disabled="@isProcessing">
                            @(HasEmploymentData() ? "Update Employment Verification" : "Submit Employment Verification")
                        </button>
                    </div>
                </div>
            </div>

            <!-- Property Appraisal -->
            <div class="card mb-3">
                <div class="card-header collapsible-header" @onclick="() => ToggleFormCollapse(nameof(propertyForm))" style="cursor: pointer;">
                    <h6 class="mb-0 d-flex justify-content-between align-items-center">
                        <span>🏠 Property Appraisal</span>
                        <div>
                            @if (HasPropertyData())
                            {
                                <span class="badge bg-success me-2">✓ Submitted</span>
                            }
                            <i class="@(GetCollapseIcon(nameof(propertyForm)))"></i>
                        </div>
                    </h6>
                </div>
                <div class="card-body collapse @(GetCollapseClass(nameof(propertyForm)))" id="@($"collapse-{nameof(propertyForm)}")">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Property Value ($)</label>
                            <input type="number" class="form-control" @bind="propertyForm.PropertyValue" placeholder="325000" min="0" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Loan Amount ($)</label>
                            <input type="number" class="form-control" @bind="propertyForm.LoanAmount" placeholder="250000" min="0" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Property Type</label>
                            <select class="form-control" @bind="propertyForm.PropertyType">
                                <option value="">Select...</option>
                                <option value="single-family">Single Family</option>
                                <option value="condo">Condominium</option>
                                <option value="townhouse">Townhouse</option>
                                <option value="multi-family">Multi-family</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <label class="form-label">Appraisal Date</label>
                            <input type="date" class="form-control" @bind="propertyForm.AppraisalDate" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">
                                <input type="checkbox" @bind="propertyForm.AppraisalCompleted" /> Appraisal Completed
                            </label>
                        </div>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-primary btn-sm" @onclick="SubmitPropertyAppraisal" disabled="@isProcessing">
                            @(HasPropertyData() ? "Update Property Appraisal" : "Submit Property Appraisal")
                        </button>
                    </div>
                </div>
            </div>
            
            <hr />
            
            <!-- Cross-Service Verification Section -->
            <div class="card mb-3 border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">🔄 Cross-Service Verification</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        Verify your mortgage application by checking documents and financial information across all connected services.
                    </p>
                    
                    @if (verificationStatus != null)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <h6>📄 Document Verification</h6>
                                <ul class="list-unstyled">
                                    <li><i class="@(verificationStatus.DocumentVerification.AllDocumentsVerified ? "text-success" : "text-danger")">@(verificationStatus.DocumentVerification.AllDocumentsVerified ? "✓" : "✗")</i> All Documents Verified</li>
                                    <li><i class="@(verificationStatus.DocumentVerification.HasIncomeDocuments ? "text-success" : "text-warning")">@(verificationStatus.DocumentVerification.HasIncomeDocuments ? "✓" : "⚠")</i> Income Documents <small class="text-muted">(tags: income, salary, pay, w2, paystub)</small></li>
                                    <li><i class="@(verificationStatus.DocumentVerification.HasCreditReport ? "text-success" : "text-warning")">@(verificationStatus.DocumentVerification.HasCreditReport ? "✓" : "⚠")</i> Credit Report <small class="text-muted">(tags: credit, credit-report, creditreport)</small></li>
                                    <li><i class="@(verificationStatus.DocumentVerification.HasEmploymentVerification ? "text-success" : "text-warning")">@(verificationStatus.DocumentVerification.HasEmploymentVerification ? "✓" : "⚠")</i> Employment Verification <small class="text-muted">(tags: employment, employer, employment-verification, verification)</small></li>
                                    <li><i class="@(verificationStatus.DocumentVerification.HasPropertyAppraisal ? "text-success" : "text-warning")">@(verificationStatus.DocumentVerification.HasPropertyAppraisal ? "✓" : "⚠")</i> Property Appraisal <small class="text-muted">(tags: appraisal, property, valuation, property-appraisal)</small></li>
                                </ul>
                                <small class="text-muted">Total Documents: @verificationStatus.DocumentVerification.DocumentCount</small>
                            </div>
                            <div class="col-md-6">
                                <h6>💰 Financial Verification</h6>
                                <ul class="list-unstyled">
                                    <li><i class="@(verificationStatus.FinancialVerification.AccountExists ? "text-success" : "text-danger")">@(verificationStatus.FinancialVerification.AccountExists ? "✓" : "✗")</i> Account Exists</li>
                                    <li><i class="@(verificationStatus.FinancialVerification.HasSufficientFunds ? "text-success" : "text-warning")">@(verificationStatus.FinancialVerification.HasSufficientFunds ? "✓" : "⚠")</i> Sufficient Funds</li>
                                    <li><i class="@(verificationStatus.FinancialVerification.IncomeConsistent ? "text-success" : "text-warning")">@(verificationStatus.FinancialVerification.IncomeConsistent ? "✓" : "⚠")</i> Income Consistent</li>
                                </ul>
                                <small class="text-muted">Current Balance: @verificationStatus.FinancialVerification.CurrentBalance.ToString("C")</small>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <div class="alert @(verificationStatus.CrossServiceVerification.AllVerificationsPassed ? "alert-success" : "alert-warning")" role="alert">
                                <strong>Overall Verification Status:</strong> 
                                @(verificationStatus.CrossServiceVerification.AllVerificationsPassed ? "✅ All verifications passed" : "⚠️ Some verifications failed")
                                
                                @if (verificationStatus.CrossServiceVerification.FailureReasons.Any())
                                {
                                    <ul class="mt-2 mb-0">
                                        @foreach (var reason in verificationStatus.CrossServiceVerification.FailureReasons)
                                        {
                                            <li>@reason</li>
                                        }
                                    </ul>
                                }
                            </div>
                            
                            @if (verificationStatus.CrossServiceVerification.HasServiceErrors)
                            {
                                <div class="alert alert-danger" role="alert">
                                    <strong>🚨 Service Errors (@verificationStatus.CrossServiceVerification.ServiceErrors.Count):</strong>
                                    @if (verificationStatus.CrossServiceVerification.ConnectivityErrors > 0)
                                    {
                                        <div class="mt-2">
                                            <strong>Connectivity Issues:</strong> @verificationStatus.CrossServiceVerification.ConnectivityErrors service(s) unavailable
                                        </div>
                                    }
                                    <ul class="mt-2 mb-0">
                                        @foreach (var error in verificationStatus.CrossServiceVerification.ServiceErrors)
                                        {
                                            <li>
                                                <strong>@error.ServiceName:</strong> @error.ErrorMessage
                                                @if (error.IsConnectivityError)
                                                {
                                                    <span class="badge bg-danger ms-1">Connection Error</span>
                                                }
                                                @if (!string.IsNullOrEmpty(error.Details))
                                                {
                                                    <br><small class="text-muted">Details: @error.Details</small>
                                                }
                                                <br><small class="text-muted">Time: @error.ErrorTime.ToString("HH:mm:ss")</small>
                                            </li>
                                        }
                                    </ul>
                                    <div class="mt-2">
                                        <small class="text-muted">
                                            💡 <strong>Tip:</strong> Service errors may be temporary. Try refreshing or running verification again.
                                        </small>
                                    </div>
                                </div>
                            }
                            
                            <small class="text-muted">Last checked: @verificationStatus.CrossServiceVerification.VerificationDate.ToString("yyyy-MM-dd HH:mm:ss")</small>
                        </div>
                    }
                    
                    <div class="d-flex gap-2 mt-3">
                        <button class="btn btn-info" @onclick="RunCrossServiceVerification" disabled="@isProcessing">
                            @(isProcessing ? "Verifying..." : "🔍 Run Verification")
                        </button>
                        <button class="btn btn-secondary" @onclick="RefreshStatus" disabled="@isProcessing">
                            @(isProcessing ? "Refreshing..." : "🔄 Refresh Status")
                        </button>
                        <button class="btn btn-outline-info" @onclick="GetVerificationStatus" disabled="@isProcessing">
                            @(isProcessing ? "Loading..." : "📊 Check Status")
                        </button>
                        <button class="btn btn-warning" @onclick="AddDemoDocuments" disabled="@isProcessing" title="Add demo documents with required tags for testing purposes">
                            @(isProcessing ? "Adding Documents..." : "🎭 Add Demo Documents")
                        </button>
                    </div>
                </div>
            </div>
            
            <hr />
            
            <div class="d-flex gap-2">
                <button class="btn btn-secondary" @onclick="RefreshRequest" disabled="@isProcessing">
                    @(isProcessing ? "Refreshing..." : "Refresh Status")
                </button>
                <button class="btn btn-danger" @onclick="DeleteRequest" disabled="@isProcessing">
                    @(isProcessing ? "Deleting..." : "Delete Request")
                </button>
            </div>
        </div>
    </div>
}

<hr />

<div class="card">
    <div class="card-header">
        <h4>All Mortgage Requests</h4>
    </div>
    <div class="card-body">
        <button class="btn btn-info mb-3" @onclick="LoadAllRequests" disabled="@isProcessing">
            @(isProcessing ? "Loading..." : "Load All Requests")
        </button>
        
        @if (allRequests.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Status Reason</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in allRequests)
                        {
                            <tr class="@(existingRequest?.Id == request.Id ? "table-active" : "")" style="cursor: pointer;">
                                <td>@request.UserName</td>
                                <td><span class="badge @GetStatusBadgeClass(request.Status)">@request.Status</span></td>
                                <td>@request.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@request.StatusReason</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => SelectRequest(request))" disabled="@isProcessing">
                                        @(existingRequest?.Id == request.Id ? "Selected" : "Select")
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-muted">No requests found.</p>
        }
    </div>
</div>

@code {
    private readonly NewRequestModel newRequestModel = new();
    private MortgageRequestDto? existingRequest;
    private List<MortgageRequestDto> allRequests = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isProcessing = false;
    private VerificationStatusDto? verificationStatus;

    // Form collapse state
    private readonly Dictionary<string, bool> formCollapseState = new()
    {
        [nameof(incomeForm)] = true,     // Show by default
        [nameof(creditForm)] = true,     // Show by default
        [nameof(employmentForm)] = true, // Show by default
        [nameof(propertyForm)] = true    // Show by default
    };

    // Form models for structured input
    private readonly IncomeForm incomeForm = new();
    private readonly CreditForm creditForm = new();
    private readonly EmploymentForm employmentForm = new();
    private readonly PropertyForm propertyForm = new();

    public class NewRequestModel
    {
        public string UserName { get; set; } = string.Empty;
    }

    public class IncomeForm
    {
        public decimal? AnnualIncome { get; set; }
        public string EmploymentType { get; set; } = string.Empty;
        public decimal? YearsEmployed { get; set; }
    }

    public class CreditForm
    {
        public int? CreditScore { get; set; }
        public DateTime? ReportDate { get; set; }
        public decimal? OutstandingDebts { get; set; }
    }

    public class EmploymentForm
    {
        public string EmployerName { get; set; } = string.Empty;
        public string JobTitle { get; set; } = string.Empty;
        public decimal? MonthlySalary { get; set; }
        public bool IsVerified { get; set; }
    }

    public class PropertyForm
    {
        public decimal? PropertyValue { get; set; }
        public decimal? LoanAmount { get; set; }
        public string PropertyType { get; set; } = string.Empty;
        public DateTime? AppraisalDate { get; set; }
        public bool AppraisalCompleted { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllRequests();
    }

    protected override void OnParametersSet()
    {
        // Prefill forms with existing data when mortgage request is loaded
        if (existingRequest != null)
        {
            PopulateFormsFromRequestData();
            UpdateFormCollapseState();
            StateHasChanged(); // Force UI update
        }
    }

    private void PopulateFormsFromRequestData()
    {
        if (existingRequest == null) 
        {
            Logger.LogWarning("PopulateFormsFromRequestData called but existingRequest is null");
            return;
        }

        try
        {
            // Try to use strongly-typed data first (new format)
            if (existingRequest.RequestData != null)
            {
                var data = existingRequest.RequestData;
                Logger.LogInformation("Populating forms with strongly-typed data");

                // Populate income form
                incomeForm.AnnualIncome = data.Income.AnnualIncome;
                incomeForm.EmploymentType = data.Income.EmploymentType ?? string.Empty;
                incomeForm.YearsEmployed = data.Income.YearsEmployed;

                // Populate credit form
                creditForm.CreditScore = data.Credit.Score;
                creditForm.ReportDate = data.Credit.ReportDate;
                creditForm.OutstandingDebts = data.Credit.OutstandingDebts;

                // Populate employment form
                employmentForm.EmployerName = data.Employment.EmployerName ?? string.Empty;
                employmentForm.JobTitle = data.Employment.JobTitle ?? string.Empty;
                employmentForm.MonthlySalary = data.Employment.MonthlySalary;
                employmentForm.IsVerified = data.Employment.IsVerified;

                // Populate property form
                propertyForm.PropertyValue = data.Property.PropertyValue;
                propertyForm.LoanAmount = data.Property.LoanAmount;
                propertyForm.PropertyType = data.Property.PropertyType ?? string.Empty;
                propertyForm.AppraisalDate = data.Property.AppraisalDate;
                propertyForm.AppraisalCompleted = data.Property.AppraisalCompleted;
            }
            else
            {
                Logger.LogInformation("No strongly-typed data available, forms will remain empty");
                // Note: Legacy fallback removed as part of type-safe refactoring
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error populating forms from request data");
            errorMessage = "Error loading existing form data.";
        }
    }

    private void UpdateFormCollapseState()
    {
        // Collapse forms that have been submitted
        var incomeSubmitted = HasIncomeData();
        var creditSubmitted = HasCreditData();
        var employmentSubmitted = HasEmploymentData();
        var propertySubmitted = HasPropertyData();
        
        Logger.LogInformation("Form submission status - Income: {Income}, Credit: {Credit}, Employment: {Employment}, Property: {Property}", 
            incomeSubmitted, creditSubmitted, employmentSubmitted, propertySubmitted);
        
        formCollapseState[nameof(incomeForm)] = !incomeSubmitted;
        formCollapseState[nameof(creditForm)] = !creditSubmitted;
        formCollapseState[nameof(employmentForm)] = !employmentSubmitted;
        formCollapseState[nameof(propertyForm)] = !propertySubmitted;
    }

    // Data checking methods
    private bool HasAnyData()
    {
        if (existingRequest?.RequestData == null) return false;
        
        return HasIncomeData() || HasCreditData() || HasEmploymentData() || HasPropertyData();
    }
    
    private bool HasIncomeData()
    {
        var hasData = existingRequest?.RequestData?.Income?.AnnualIncome.HasValue == true;
        Logger.LogInformation("HasIncomeData: {HasData}", hasData);
        return hasData;
    }

    private bool HasCreditData()
    {
        var hasData = existingRequest?.RequestData?.Credit?.Score.HasValue == true;
        Logger.LogInformation("HasCreditData: {HasData}", hasData);
        return hasData;
    }

    private bool HasEmploymentData()
    {
        var hasData = !string.IsNullOrEmpty(existingRequest?.RequestData?.Employment?.EmployerName);
        Logger.LogInformation("HasEmploymentData: {HasData}", hasData);
        return hasData;
    }

    private bool HasPropertyData()
    {
        var hasData = existingRequest?.RequestData?.Property?.PropertyValue.HasValue == true;
        Logger.LogInformation("HasPropertyData: {HasData}", hasData);
        return hasData;
    }

    // Collapse management methods
    private void ToggleFormCollapse(string formName)
    {
        if (formCollapseState.ContainsKey(formName))
        {
            formCollapseState[formName] = !formCollapseState[formName];
        }
    }

    private string GetCollapseClass(string formName)
    {
        return formCollapseState.TryGetValue(formName, out var isExpanded) && isExpanded ? "show" : "";
    }

    private string GetCollapseIcon(string formName)
    {
        return formCollapseState.TryGetValue(formName, out var isExpanded) && isExpanded 
            ? "fas fa-chevron-up" 
            : "fas fa-chevron-down";
    }

    private async Task SubmitIncomeVerification()
    {
        if (existingRequest == null) return;

        if (!incomeForm.AnnualIncome.HasValue || incomeForm.AnnualIncome <= 0)
        {
            errorMessage = "Please enter a valid annual income greater than $0.";
            return;
        }

        if (string.IsNullOrWhiteSpace(incomeForm.EmploymentType))
        {
            errorMessage = "Please select an employment type.";
            return;
        }

        var updateData = new UpdateMortgageDataStrongDto
        {
            Income = new MortgageIncomeDataDto
            {
                AnnualIncome = incomeForm.AnnualIncome.Value,
                EmploymentType = incomeForm.EmploymentType,
                YearsEmployed = incomeForm.YearsEmployed ?? 0
            }
        };

        await SubmitStrongFormData(updateData, "Income Verification");
        
        // Update form state and collapse if successful
        if (string.IsNullOrEmpty(errorMessage))
        {
            UpdateFormCollapseState();
            // Don't clear form - keep it prefilled for updates
        }
    }

    private async Task SubmitCreditReport()
    {
        if (existingRequest == null) return;

        if (!creditForm.CreditScore.HasValue || creditForm.CreditScore < 300 || creditForm.CreditScore > 850)
        {
            errorMessage = "Please enter a valid credit score (300-850).";
            return;
        }

        var updateData = new UpdateMortgageDataStrongDto
        {
            Credit = new MortgageCreditDataDto
            {
                Score = creditForm.CreditScore.Value,
                ReportDate = creditForm.ReportDate ?? DateTime.Now,
                OutstandingDebts = creditForm.OutstandingDebts ?? 0
            }
        };

        await SubmitStrongFormData(updateData, "Credit Report");
        
        // Update form state and collapse if successful
        if (string.IsNullOrEmpty(errorMessage))
        {
            UpdateFormCollapseState();
            // Don't clear form - keep it prefilled for updates
        }
    }

    private async Task SubmitEmploymentVerification()
    {
        if (existingRequest == null) return;

        if (string.IsNullOrWhiteSpace(employmentForm.EmployerName) || string.IsNullOrWhiteSpace(employmentForm.JobTitle))
        {
            errorMessage = "Please enter employer name and job title.";
            return;
        }

        var updateData = new UpdateMortgageDataStrongDto
        {
            Employment = new MortgageEmploymentDataDto
            {
                EmployerName = employmentForm.EmployerName,
                JobTitle = employmentForm.JobTitle,
                MonthlySalary = employmentForm.MonthlySalary ?? 0,
                IsVerified = employmentForm.IsVerified
            }
        };

        await SubmitStrongFormData(updateData, "Employment Verification");
        
        // Update form state and collapse if successful
        if (string.IsNullOrEmpty(errorMessage))
        {
            UpdateFormCollapseState();
            // Don't clear form - keep it prefilled for updates
        }
    }

    private async Task SubmitPropertyAppraisal()
    {
        if (existingRequest == null) return;

        if (!propertyForm.PropertyValue.HasValue || propertyForm.PropertyValue <= 0)
        {
            errorMessage = "Please enter a valid property value greater than $0.";
            return;
        }

        if (!propertyForm.LoanAmount.HasValue || propertyForm.LoanAmount <= 0)
        {
            errorMessage = "Please enter a valid loan amount greater than $0.";
            return;
        }

        if (propertyForm.LoanAmount > propertyForm.PropertyValue)
        {
            errorMessage = "Loan amount cannot exceed property value.";
            return;
        }

        if (string.IsNullOrWhiteSpace(propertyForm.PropertyType))
        {
            errorMessage = "Please select a property type.";
            return;
        }

        var updateData = new UpdateMortgageDataStrongDto
        {
            Property = new MortgagePropertyDataDto
            {
                PropertyValue = propertyForm.PropertyValue.Value,
                LoanAmount = propertyForm.LoanAmount.Value,
                PropertyType = propertyForm.PropertyType,
                AppraisalDate = propertyForm.AppraisalDate ?? DateTime.Now,
                AppraisalCompleted = propertyForm.AppraisalCompleted
            }
        };

        await SubmitStrongFormData(updateData, "Property Appraisal");
        
        // Update form state and collapse if successful
        if (string.IsNullOrEmpty(errorMessage))
        {
            UpdateFormCollapseState();
            // Don't clear form - keep it prefilled for updates
        }
    }

    private async Task SubmitStrongFormData(UpdateMortgageDataStrongDto updateData, string formType)
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var result = await MortgageApi.UpdateMortgageDataStrongAsync(existingRequest.Id, updateData);
            if (result != null)
            {
                existingRequest = result;
                PopulateFormsFromRequestData(); // Refresh form data
                successMessage = $"{formType} submitted successfully. Status may have changed.";
            }
            else
            {
                errorMessage = $"Failed to submit {formType}.";
            }
        }
        catch (ArgumentException ex)
        {
            Logger.LogError(ex, "Validation error submitting {FormType}", formType);
            errorMessage = $"Validation error: {ex.Message}";
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP error submitting {FormType}", formType);
            errorMessage = $"Network error: {ex.Message}";
        }
        catch (InvalidOperationException ex)
        {
            Logger.LogError(ex, "Data error submitting {FormType}", formType);
            errorMessage = $"Data error: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error submitting {FormType}", formType);
            errorMessage = $"An unexpected error occurred while submitting {formType}.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CreateRequest()
    {
        if (string.IsNullOrWhiteSpace(newRequestModel.UserName))
        {
            errorMessage = "Please enter a username.";
            return;
        }

        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await MortgageApi.CreateMortgageRequestAsync(newRequestModel.UserName);
            if (result != null)
            {
                existingRequest = result;
                successMessage = "Mortgage request created successfully!";
                newRequestModel.UserName = string.Empty;
                await LoadAllRequests(); // Refresh the list
            }
            else
            {
                errorMessage = "Failed to create mortgage request. You may already have an existing request.";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP error creating mortgage request");
            errorMessage = $"API Error: {ex.Message}";
        }
        catch (InvalidOperationException ex)
        {
            Logger.LogError(ex, "Data error creating mortgage request");
            errorMessage = $"Data Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error creating mortgage request");
            errorMessage = $"Unexpected Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RefreshRequest()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var result = await MortgageApi.GetMortgageRequestByUserAsync(existingRequest.UserName);
            if (result != null)
            {
                existingRequest = result;
                PopulateFormsFromRequestData(); // Refresh form data
                UpdateFormCollapseState(); // Update collapse state
                StateHasChanged(); // Force UI update
                successMessage = "Request status updated.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing mortgage request");
            errorMessage = "An error occurred while refreshing the request.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteRequest()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var success = await MortgageApi.DeleteMortgageRequestAsync(existingRequest.Id);
            if (success)
            {
                existingRequest = null;
                successMessage = "Mortgage request deleted successfully.";
                await LoadAllRequests();
            }
            else
            {
                errorMessage = "Failed to delete mortgage request.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting mortgage request");
            errorMessage = "An error occurred while deleting the request.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task LoadAllRequests()
    {
        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            allRequests = await MortgageApi.GetMortgageRequestsAsync(1, 20);
            
            // If a request is currently selected, refresh it from the list
            if (existingRequest != null)
            {
                var updatedRequest = allRequests.FirstOrDefault(r => r.Id == existingRequest.Id);
                if (updatedRequest != null)
                {
                    existingRequest = updatedRequest;
                    PopulateFormsFromRequestData(); // Re-populate forms
                    UpdateFormCollapseState(); // Update collapse state
                    successMessage = "Requests loaded and selected request refreshed.";
                }
                else
                {
                    existingRequest = null;
                    successMessage = "Requests loaded. Previously selected request no longer exists.";
                }
            }
            else if (allRequests.Any())
            {
                successMessage = $"Successfully loaded {allRequests.Count} mortgage requests.";
            }
            else
            {
                successMessage = "No mortgage requests found.";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP error loading mortgage requests");
            errorMessage = $"API Error: {ex.Message}";
        }
        catch (InvalidOperationException ex)
        {
            Logger.LogError(ex, "Deserialization error loading mortgage requests");
            errorMessage = $"Data Format Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error loading mortgage requests");
            errorMessage = $"Unexpected Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RunCrossServiceVerification()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var verificationResult = await MortgageApi.VerifyMortgageRequestAsync(existingRequest.Id);
            if (verificationResult != null)
            {
                if (verificationResult.AllVerificationsPassed)
                {
                    successMessage = "✅ Cross-service verification completed successfully!";
                }
                else
                {
                    var errorCount = verificationResult.ServiceErrors.Count;
                    var connectivityErrors = verificationResult.ServiceErrors.Count(e => e.IsConnectivityError);
                    
                    if (connectivityErrors > 0)
                    {
                        successMessage = $"⚠️ Verification completed with {connectivityErrors} connectivity error(s). Issues: {string.Join(", ", verificationResult.FailureReasons)}";
                    }
                    else
                    {
                        successMessage = $"⚠️ Verification completed with issues: {string.Join(", ", verificationResult.FailureReasons)}";
                    }
                }
                
                // Refresh the request to get updated status
                await RefreshRequest();
                
                // Get detailed verification status
                await GetVerificationStatus();
            }
            else
            {
                errorMessage = "Failed to run cross-service verification. The service may be unavailable.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error running cross-service verification");
            errorMessage = $"An error occurred while running cross-service verification: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RefreshStatus()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var updatedRequest = await MortgageApi.RefreshMortgageRequestStatusAsync(existingRequest.Id);
            if (updatedRequest != null)
            {
                existingRequest = updatedRequest;
                successMessage = "Request status refreshed with latest cross-service verification.";
                
                // Also refresh verification status
                await GetVerificationStatus();
            }
            else
            {
                errorMessage = "Failed to refresh request status.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing request status");
            errorMessage = "An error occurred while refreshing the request status.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task GetVerificationStatus()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            verificationStatus = await MortgageApi.GetVerificationStatusAsync(existingRequest.Id);
            if (verificationStatus != null)
            {
                successMessage = "Verification status loaded successfully.";
            }
            else
            {
                errorMessage = "Failed to get verification status.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting verification status");
            errorMessage = "An error occurred while getting verification status.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task AddDemoDocuments()
    {
        if (existingRequest == null) return;

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var userName = existingRequest.UserName;
            
            // Create demo documents with required tags
            var documents = new[]
            {
                new { fileName = "income_statement.pdf", tags = new[] { "income", "salary", "financial" }, content = "Demo Income Statement Document" },
                new { fileName = "credit_report.pdf", tags = new[] { "credit", "credit-report", "financial" }, content = "Demo Credit Report Document" },
                new { fileName = "employment_verification.pdf", tags = new[] { "employment", "verification", "employer" }, content = "Demo Employment Verification Document" },
                new { fileName = "property_appraisal.pdf", tags = new[] { "appraisal", "property", "valuation" }, content = "Demo Property Appraisal Document" }
            };

            var successCount = 0;
            var errors = new List<string>();

            // Create a simple mock IBrowserFile implementation for demo purposes
            foreach (var doc in documents)
            {
                try
                {
                    var mockFile = new MockBrowserFile(doc.fileName, doc.content);
                    var result = await DocumentApi.UploadDocumentAsync(userName, mockFile, doc.tags.ToList());
                    
                    if (result != null)
                    {
                        successCount++;
                    }
                    else
                    {
                        errors.Add($"{doc.fileName}: Upload failed");
                    }
                }
                catch (Exception ex)
                {
                    errors.Add($"{doc.fileName}: {ex.Message}");
                }
            }

            if (successCount == documents.Length)
            {
                successMessage = $"🎉 Successfully added {successCount} demo documents! All required document types are now available for verification.";
            }
            else if (successCount > 0)
            {
                successMessage = $"⚠️ Added {successCount} out of {documents.Length} demo documents. Some failed: {string.Join(", ", errors)}";
            }
            else
            {
                errorMessage = $"❌ Failed to add demo documents. Errors: {string.Join(", ", errors)}";
            }

            // Refresh verification status after adding documents
            if (successCount > 0)
            {
                await Task.Delay(1000); // Give the service a moment to process
                await GetVerificationStatus();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding demo documents");
            errorMessage = "An error occurred while adding demo documents.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Mock IBrowserFile implementation for demo purposes
    private class MockBrowserFile : IBrowserFile
    {
        private readonly string _content;
        
        public MockBrowserFile(string name, string content)
        {
            Name = name;
            _content = content;
            Size = System.Text.Encoding.UTF8.GetByteCount(content);
            LastModified = DateTimeOffset.UtcNow;
            ContentType = "application/pdf";
        }
        
        public string Name { get; }
        public DateTimeOffset LastModified { get; }
        public long Size { get; }
        public string ContentType { get; }

        public Stream OpenReadStream(long maxAllowedSize = 512000, CancellationToken cancellationToken = default)
        {
            return new MemoryStream(System.Text.Encoding.UTF8.GetBytes(_content));
        }
    }

    private void SelectRequest(MortgageRequestDto request)
    {
        existingRequest = request;
        PopulateFormsFromRequestData(); // Populate forms with data
        UpdateFormCollapseState(); // Update collapse state
        StateHasChanged(); // Force UI update
        successMessage = $"Selected mortgage request for {request.UserName}";
        errorMessage = string.Empty;
        verificationStatus = null; // Clear previous verification status
    }

    private void ClearSelection()
    {
        existingRequest = null;
        verificationStatus = null;
        successMessage = "Selection cleared. You can now create a new request.";
        errorMessage = string.Empty;
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Pending" => "bg-warning text-dark",
        "UnderReview" => "bg-info text-white",
        "Approved" => "bg-success text-white",
        "Rejected" => "bg-danger text-white",
        "RequiresAdditionalInfo" => "bg-secondary text-white",
        _ => "bg-light text-dark"
    };
}