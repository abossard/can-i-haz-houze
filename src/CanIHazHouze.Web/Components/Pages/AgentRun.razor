@page "/agents/run/{AgentId}"
@using AgentModel = CanIHazHouze.Web.Agent
@using AgentRunModel = CanIHazHouze.Web.AgentRun
@using AgentRunLogModel = CanIHazHouze.Web.AgentRunLog
@inject AgentApiClient AgentApi
@inject NavigationManager NavigationManager

<PageTitle>Run Agent - CanIHazHouze</PageTitle>

<div class="container mt-4">
    <div class="mb-4">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            ← Back to Agents
        </button>
    </div>

    <h1>▶️ Run Agent</h1>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @error
        </div>
    }
    else if (agent != null)
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">@agent.Name</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">@agent.Description</p>

                        @if (agent.InputVariables.Count > 0)
                        {
                            <h6 class="mt-3 mb-3">Input Variables:</h6>
                            @foreach (var variable in agent.InputVariables)
                            {
                                <div class="mb-3">
                                    <label for="input-@variable.Name" class="form-label">
                                        @variable.Name @(variable.Required ? "*" : "")
                                    </label>
                                    @if (!string.IsNullOrEmpty(variable.Description))
                                    {
                                        <div class="form-text mb-2">@variable.Description</div>
                                    }
                                    <input type="text" class="form-control" id="input-@variable.Name" 
                                           @bind="inputValues[variable.Name]" 
                                           placeholder="Enter @variable.Name" />
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info">
                                This agent has no input variables. It will run with its default prompt.
                            </div>
                        }

                        <button class="btn btn-success mt-3" @onclick="ExecuteAgent" disabled="@running">
                            @if (running)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Running</text>
                            }
                            else
                            {
                                <span>▶️ Run Agent</span>
                            }
                        </button>
                    </div>
                </div>

                @if (run != null)
                {
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Execution Result</h5>
                            <span class="badge @GetStatusBadgeClass(run.Status)">@run.Status.ToUpper()</span>
                        </div>
                        <div class="card-body">
                            @if (run.Status == "completed" && !string.IsNullOrEmpty(run.Result))
                            {
                                <div class="alert alert-success">
                                    <h6>Result:</h6>
                                    <div style="white-space: pre-wrap;">@run.Result</div>
                                </div>
                            }
                            else if (run.Status == "failed" && !string.IsNullOrEmpty(run.Error))
                            {
                                <div class="alert alert-danger">
                                    <h6>Error:</h6>
                                    <p>@run.Error</p>
                                </div>
                            }
                            else if (run.Status == "running")
                            {
                                <div class="alert alert-info">
                                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                    Agent is running...
                                </div>
                            }

                            @if (run.Logs.Count > 0)
                            {
                                <div class="mt-3">
                                    <h6>Execution Logs:</h6>
                                    <div class="list-group">
                                        @foreach (var log in run.Logs)
                                        {
                                            <div class="list-group-item">
                                                <div class="d-flex w-100 justify-content-between">
                                                    <span class="badge @GetLogLevelBadgeClass(log.Level)">@log.Level.ToUpper()</span>
                                                    <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</small>
                                                </div>
                                                <p class="mb-1 mt-2">@log.Message</p>
                                                @if (log.Data != null && log.Data.Count > 0)
                                                {
                                                    <small class="text-muted">
                                                        @foreach (var kvp in log.Data)
                                                        {
                                                            <div>@kvp.Key: @kvp.Value</div>
                                                        }
                                                    </small>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <div class="mt-3">
                                <small class="text-muted">
                                    Started: @run.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                    @if (run.CompletedAt.HasValue)
                                    {
                                        <span> | Completed: @run.CompletedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                        <span> | Duration: @((run.CompletedAt.Value - run.StartedAt).TotalSeconds.ToString("F2"))s</span>
                                    }
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? AgentId { get; set; }

    private AgentModel? agent;
    private AgentRunModel? run;
    private Dictionary<string, string> inputValues = new();
    private bool loading = true;
    private bool running = false;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadAgent();
    }

    private async Task LoadAgent()
    {
        try
        {
            loading = true;
            error = null;
            agent = await AgentApi.GetAgentAsync(AgentId!);
            
            if (agent != null)
            {
                // Initialize input values dictionary
                foreach (var variable in agent.InputVariables)
                {
                    inputValues[variable.Name] = string.Empty;
                }
            }
            else
            {
                error = "Agent not found";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ExecuteAgent()
    {
        if (agent == null) return;

        try
        {
            running = true;
            error = null;

            // Validate required inputs
            foreach (var variable in agent.InputVariables.Where(v => v.Required))
            {
                if (!inputValues.ContainsKey(variable.Name) || string.IsNullOrWhiteSpace(inputValues[variable.Name]))
                {
                    error = $"Required input variable '{variable.Name}' is missing";
                    return;
                }
            }

            run = await AgentApi.RunAgentAsync(AgentId!, inputValues);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            running = false;
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "bg-success",
            "failed" => "bg-danger",
            "running" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetLogLevelBadgeClass(string level)
    {
        return level.ToLower() switch
        {
            "error" => "bg-danger",
            "warning" => "bg-warning",
            "info" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/agents");
    }
}
